// import https from 'https'; //? –¥–ª—è 1-–≥–æ —Ç–∞ 2-–≥–æ —Å–ø–æ—Å–æ–±—É
import axios from 'axios'; //? 3-–≥–æ —Å–ø–æ—Å–æ–±—É
import { getKeyValue, TOKEN_DICTIONARY } from './storage.service.js';

const getIcon = (icon) => {
    switch (icon.slice(0, -1)) {
		case '01':
			return '‚òÄÔ∏è';
		case '02':
			return 'üå§Ô∏è';
		case '03':
			return '‚òÅÔ∏è';
		case '04':
			return '‚òÅÔ∏è';
		case '09':
			return 'üåßÔ∏è';
		case '10':
			return 'üå¶Ô∏è';
		case '11':
			return 'üå©Ô∏è';
		case '13':
			return '‚ùÑÔ∏è';
		case '50':
			return 'üå´Ô∏è';
	}
};

const getWeather = async (city) => {
    const token = process.env.TOKEN ?? await getKeyValue(TOKEN_DICTIONARY.token);
    if (!token) {
        throw new Error('–ù–µ –∑–∞–¥–∞–Ω–æ –∫–ª—é—á API. –ó–∞–¥–∞–π—Ç–µ –π–æ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É -t [API_KEY]');
    }

    //! –∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞–Ω–Ω—è url —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö 
    //? –∑–∞–º—ñ—Å—Ç—å 1-–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞–Ω–Ω—è url –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç 2 –∞–±–æ 3
    //* 1-–π —Å–ø–æ—Å—ñ–± (—Ä—É—á–Ω–µ –∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞–Ω–Ω—è url + https –ø–ª–∞–≥—ñ–Ω)
    /* const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${key}`;

    https.get(url, (response) => {
        let res = '';
        response.on('data', (chunk) => {
            res += chunk;
        });
        response.on('end', () => {
            console.log(res);
        });
    });  */
    //* 2-–π —Å–ø–æ—Å—ñ–± (–∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ URL + https –ø–ª–∞–≥—ñ–Ω)
    /* const url = new URL('https://api.openweathermap.org/data/2.5/weather');
    url.searchParams.append('q', city);
    url.searchParams.append('appid', token);
    url.searchParams.append('lang', 'en');
    url.searchParams.append('units', 'metric');

    https.get(url, (response) => {
        let res = '';
        response.on('data', (chunk) => {
            res += chunk;
        });
        response.on('end', () => {
            console.log(res);
        });
    }); */
    //* 3-–π —Å–ø–æ—Å—ñ–± (–ø–ª–∞–≥—ñ–Ω axios –∫–æ–Ω—Å—Ç—Ä—É—é—î url —ñ –æ—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ)
    const { data } = await axios.get('https://api.openweathermap.org/data/2.5/weather', {
        params: {
            q: city,
            appid: token,
            lang: 'en',
            units: 'metric'
        }
    });
    return data;
};

export { getWeather, getIcon }